{"version":3,"sources":["components/card/card-component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,G,MAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACpB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCFTC,G,MAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GACL,qBAAKC,UAAU,YAAf,SAEND,EAAMW,SAASC,KAAI,SAACR,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNdQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAC,KAAK,SACLf,UAAU,SACVa,YAAaA,EACbG,SAAUF,MCoCCG,G,wDAtCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,+BAOrC,IAAD,EAC2BC,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC5B,GAAD,OACvCA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAKhC,UAAU,MAAf,UACA,mDACE,cAAC,EAAD,CACEa,YAAY,kBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4ad98568.chunk.js","sourcesContent":["import React from 'react'\nimport './card.style.css'\n\nexport const Card = (props) => (\n  <div className='card-container'>\n  <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`} />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n)\n","import React from 'react'\nimport { Card } from '../card/card-component'\nimport './card-list.styles.css'\n\n\nexport const CardList = (props)=> {\n    console.log(props)\n    return <div className='card-list'>\n    \n    {props.monsters.map((monster) => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    \n    \n    </div>\n}","import React from 'react'\nimport './search-box.styles.css'\n\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input\n    type='search'\n    className='search'\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n)\n","import React, { Component } from 'react'\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/search-box/search-box.component'\n\nimport './App.css'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }))\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className='App'>\n      <h1>Monsters Rolodex </h1>\n        <SearchBox\n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}